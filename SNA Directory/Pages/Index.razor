@page "/"
@using SNA_Directory.Components
@inject ProtectedSessionStorage sessionStorage
@inject IJSRuntime JS

<PageTitle>Mn Scientific and Natural Areas</PageTitle>
<div>
    <h1 class="page-heading mb-4">Minnesota's Scientific and Natural Areas</h1>
    <div class="row nav-links">
        <div class="col-md-4 py-2">
            <button class="btn btn-filter @FilterByBiomeClass(true)" @onclick="(()=> FilterByBiome(true))">Biomes</button>
            <button class="btn btn-filter @FilterByBiomeClass(false)" @onclick="(()=> FilterByBiome(false))">Landscapes</button>
        </div>
        <div class="col-md-4 py-2">
            <input type="text" placeholder="Search" aria-label="Search Box" class="form-control rounded-control" @oninput="((txt) => OnSearchInput(txt.Value??string.Empty))" />
        </div>
    </div>
    <div class="lists row ">
        <div class="arealist col-md-4 px-4 m-4 ">
            <AreaList @ref="areaListComponent" />
        </div>
        <div class="filter col-md-4 px-4 m-4">
            <FilterList isFilteredByBiome="@isFilteredByBiome"
                        SelectedBiome="@selectedBiome"
                        SelectedBiomeChanged="@HandleBiomeChanged"
                        SelectedLandscape="@selectedLandscape"
                        SelectedLandscapeChanged="@HandleLandscapeChanged" />
        </div>
    </div>
    <div class="ack-row row">

        <div class="acknowlegement col-10">
            <p>
                This site is based on the Minnesota DNR Scientific and Natural Areas site and is licensed under the
                <a href="https://www.dnr.state.mn.us/sitetools/data_software_license.html">
                    Minnesota DNR General Data & Software License Agreement
                </a>
                . All images copyright Minnesota DNR.
            </p>
        </div>

    </div>
</div>


@code {

    private string selectedBiome = "All";
    private string selectedLandscape = "All";

    private bool isFilteredByBiome = true;
    private string selectedBackgroundUrl = string.Empty;
    private string biomeBackgroundUrl = _defaultBackground;
    private string landscapeBackgroundUrl = _defaultBackground;
    private const string _defaultBackground = "https://images.dnr.state.mn.us/destinations/snas/banner_snas_main.jpg";
    private AreaList? areaListComponent;

    private string searchText = "";


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadFilterState();
            await FilterAreas();
            StateHasChanged();
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedBiome));
        selectedBiome = (stringResults.Success ? stringResults.Value : "All") ?? string.Empty;

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedLandscape));
        selectedLandscape = (stringResults.Success ? stringResults.Value : "All") ?? string.Empty;

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isFilteredByBiome));
        isFilteredByBiome = boolResults.Success ? boolResults.Value : true;

        stringResults = await sessionStorage.GetAsync<string>(nameof(biomeBackgroundUrl));
        biomeBackgroundUrl = (stringResults.Success ? stringResults.Value : _defaultBackground) ?? _defaultBackground;
        stringResults = await sessionStorage.GetAsync<string>(nameof(landscapeBackgroundUrl));
        landscapeBackgroundUrl = (stringResults.Success ? stringResults.Value : _defaultBackground) ?? _defaultBackground;
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedBiome), selectedBiome);
        await sessionStorage.SetAsync(nameof(selectedLandscape), selectedLandscape);
        await sessionStorage.SetAsync(nameof(isFilteredByBiome), isFilteredByBiome);
        await sessionStorage.SetAsync(nameof(biomeBackgroundUrl), biomeBackgroundUrl);
        await sessionStorage.SetAsync(nameof(landscapeBackgroundUrl), landscapeBackgroundUrl);
    }

    private async Task FilterAreas()
    {
        await SaveFilterState();
        await SetBackground();
        areaListComponent?.FilterAreas(isFilteredByBiome, selectedBiome, selectedLandscape, searchText);
    }

    private async Task FilterByBiome(bool isBiome)
    {
        isFilteredByBiome = isBiome;
        await FilterAreas();
    }

    private async Task OnSearchInput(object searchInput)
    {
        searchText = searchInput as string ?? string.Empty;
        await FilterAreas();
    }

    public async Task HandleBiomeChanged((string, string) selector)
    {
        selectedBiome = selector.Item1;
        biomeBackgroundUrl = selector.Item2;
        await FilterAreas();
    }

    public async Task HandleLandscapeChanged((string, string) selector)
    {
        selectedLandscape = selector.Item1;
        landscapeBackgroundUrl = selector.Item2;
        await FilterAreas();
    }

    private async Task SetBackground()
    {
        string backgroundUrl = isFilteredByBiome ? biomeBackgroundUrl : landscapeBackgroundUrl;
        if ((selectedBackgroundUrl != backgroundUrl))
        {
            await JS.InvokeVoidAsync("setBackgroundUrl", backgroundUrl);
            selectedBackgroundUrl = backgroundUrl;
        }
    }
    private string FilterByBiomeClass(bool isByBiome)
    {
        string css = string.Empty;
        if (isByBiome == isFilteredByBiome)
        {
            css = "filter-selected";
        }
        return css;
    }
}
