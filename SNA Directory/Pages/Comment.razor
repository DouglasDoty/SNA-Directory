@page "/Comment/{Id}"
@inject ISNAData snaData
@inject NavigationManager navManager
@inject IJSRuntime JS


<h1 class="row justify-content-center p-4">Add a Comment</h1>

<div class="row justify-content-center suggestion-form">
    <div class="col-xl-6 col-md-8 comment-layout">
        <div class="d-flex justify-content-end">
            <span class=" oi oi-x  " @onclick="(()=>ClosePage())"></span>
        </div>
        <EditForm Model=@commentModel OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="name-section mb-4">
                <label class="form-label " for="name">Your name</label>
                <InputText class="form-control" id="name" @bind-Value="commentModel.Name" />
            </div>
            <div class="comment-text-section mb-4">
                <label class="form-label" for="text">Enter your comment</label>
                <InputTextArea class="form-control" id="text" @bind-Value="commentModel.Text" />
            </div>

            <div class="d-flex justify-content-center">
                <button class="btn my-2 " type="submit">Save</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    //private EditContext? editContext;
    private CommentModel commentModel = new();
    //private int _textLength = 0;


    //protected override void OnInitialized()
    //{
    //    editContext = new(commentModel);
    //    editContext.OnFieldChanged += HandleFieldChanged;
    //}

    //public void Dispose()
    //{
    //    if (editContext is not null)
    //    {
    //        editContext.OnFieldChanged -= HandleFieldChanged;
    //    }
    //}

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setBackgroundUrl", "../images/LgtGreen.png");
        }
    }

    //private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
    //{
    //    if (editContext is not null)
    //    {
    //        if(!editContext.Validate())
    //        {
    //            var msgs = editContext.GetValidationMessages();
    //            foreach(string msg in msgs)
    //            {
    //                if(msg.StartsWith("Comments are limited"))
    //                {
    //                    var x = 1;
    //                }
    //            }
    //        }
    //    }
    //}

    private async void HandleValidSubmit()
    {
        commentModel.DnrId = int.Parse(Id);
        commentModel.Date = DateTime.UtcNow;
        await snaData.CreateComment(commentModel);
        ClosePage();
    }

    private void ClosePage()
    {
        JS.InvokeVoidAsync("history.go", -1);
    }

}
