@page "/Details/{Id}"
@inject ISNAData snaData
@inject IJSRuntime JS
@inject NavigationManager navManager
<div class="d-flex justify-content-end">
    <span class=" oi oi-x" @onclick="(()=>ClosePage())"></span>
</div>

<!-- Modal -->
<div class="modal fade" id="saveCommentModal" tabindex="-1" aria-labelledby="saveCommentModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="saveCommentModalLabel">Save Comment?</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm Model=@commentModel OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="modal-body">
                    <div class="name-section mb-4">
                        <label class="form-label " for="name">Your name</label>
                        <InputText class="form-control" id="name" @bind-Value="commentModel.Name" />
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="(()=>commentText.Element.Value.FocusAsync())" data-bs-dismiss="modal">Edit More</button>
                    <button type="button" class="btn btn-secondary" @onclick="(()=>DiscardComment())" data-bs-dismiss="modal">Discard Comment</button>
                    <button type="submit" class="btn btn-primary">Save Comment</button>
                </div>
            </EditForm>

        </div>
    </div>
</div>

@if (_sna is not null)
{
    <div>
        <div class="row p-2">
            <div class="col-1">
                <img src="@GetSNAMap()" height="55">
            </div>
            <h2 class="col-11 col-md-8">SNA Name: @_sna.Name</h2>



        </div>
        <div>Biome(Province): @_sna.Biome</div>

        <div>Landscape: @_sna.Landscape</div>
        <div class="row image-buttons">
        </div>
        <div class="row">
            <div id="carouselControl" class="carousel slide col-8 p-0" data-bs-ride="carousel">
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src="@GetSNABanner()" class="d-block w-100" alt="...">
                    </div>
                    @for (int i = 1; i < 6; i++)
                    {
                        <div class="carousel-item">
                            <img src="@GetSnaImage(i)" class="d-block w-100" alt="...">
                        </div>

                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#carouselControl" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#carouselControl" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>

            </div>

            <div class="col-4">
                <div  class=" new-comment p-0 mx-2">
                <EditForm Model=@commentModel>
                    <InputTextArea placeholder="Add a comment"
                               class="form-control new-comment-text"
                               @ref="commentText"
                               @onkeypress="((el)=>OnKeyPress(el))"
                               @bind-Value="commentModel.Text">
                    </InputTextArea>
                </EditForm>
                </div>
                @if (_comments?.Count > 0)
                {
                    @foreach (CommentModel comment in _comments)
                    {
                        <div class="sna-comment p-2 m-2">
                            <span>
                                @comment.Name
                            </span>
                            <span>said at</span>
                            <span>
                                @comment.Date.ToLocalTime().ToString("HH:mm on MMM dd yyy"):
                            </span>
                            <div class="comment-body">
                                @comment.Text
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }
    private int _imageIndex = 0;

    private SNAModel _sna;
    private List<CommentModel> _comments;
    private CommentModel commentModel = new();
    private InputTextArea commentText;

    protected async override Task OnInitializedAsync()
    {
        _sna = await snaData.GetSnaAsync(Id);
        _comments = await snaData.GetComments(_sna.DNRId);
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setBackgroundUrl", "../images/LgtGreen.png");
        }
    }


    private string GetSNAMap()
    {
        var result = $"https://maps1.dnr.state.mn.us/cgi-bin/locator.cgi?id=sna{_sna.DNRId.ToString("00000")}&type=sna&style=wolf";
        return result;
    }

    private string GetSNABanner()
    {
        return $"https://images.dnr.state.mn.us/destinations/snas/slides/banners/sna{_sna.DNRId.ToString("00000")}_banner.jpg";
    }

    private string GetSnaImage(int i = 1)
    {
        return $"https://images.dnr.state.mn.us/destinations/snas/slides/sna{_sna.DNRId.ToString("00000")}_{i.ToString("0")}.jpg";
    }

    private void NewComment()
    {
        navManager.NavigateTo($"./comment/{_sna.DNRId.ToString()}");
    }

    private async void SaveComment()
    {
        await JS.InvokeVoidAsync("popModal", "saveCommentModal");
    }

    private void OnKeyPress(KeyboardEventArgs el)
    {
        if (el.Key == "Enter")
        {
            SaveComment();
        }
    }

    private void DiscardComment()
    {
        commentModel = new();
        commentText.Element.Value.FocusAsync();
    }

    private async void HandleValidSubmit()
    {
        await JS.InvokeVoidAsync("closeModal", "saveCommentModal");
        commentModel.DnrId = _sna.DNRId;
        commentModel.Date = DateTime.UtcNow;
        await snaData.CreateComment(commentModel);
        commentModel = new();
        _comments = await snaData.GetComments(_sna.DNRId);
         StateHasChanged();
    }


    private async void ClosePage()
    {
        await JS.InvokeVoidAsync("setBackgroundUrl", "https://images.dnr.state.mn.us/destinations/snas/banner_snas_main.jpg");
        navManager.NavigateTo("/");
    }
}
