@inject IJSRuntime JS

<EditForm EditContext="@editContext" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <InputTextArea placeholder="Add a comment"
                   class="form-control new-comment-text"
                   @ref="commentText"
                   @onkeypress="((el)=>OnKeyPress(el))"
                   @onfocusout="((el)=>OnLoseFocus(el))"
                   @bind-Value="commentModel.Text">
    </InputTextArea>
    <!-- Modal -->
    <div class="modal fade" id="saveCommentModal" tabindex="-1" aria-labelledby="saveCommentModalLabel" aria-hidden="true">
        <div class="modal-dialog" @onfocusin="(()=>OnModalFocus())">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="saveCommentModalLabel">Save Comment?</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" @onclick="(()=>NewModel())" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <ValidationSummary />
                    <div class="name-section mb-4">
                        <label class="form-label " for="name">Your name</label>
                        <InputText class="form-control" id="name" @bind-Value="commentModel.Name" />
                    </div>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="(()=>RefocusCommentText())" data-bs-dismiss="modal">Edit More</button>
                    <button type="button" class="btn btn-secondary" @onclick="(()=>NewModel())" data-bs-dismiss="modal">Discard Comment</button>
                    <button type="submit" class="btn btn-primary">Save Comment</button>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code {
    [Parameter]
    public AreaModel? Area { get; set; }
    [Parameter]
    public EventCallback<CommentModel> CommentCompleted { get; set; }
    private CommentModel commentModel = new();
    private InputTextArea? commentText;
    private EditContext? editContext;
    private FieldIdentifier _commentTextIdentifier;
    private bool _popingModal = false;

    protected override void OnInitialized()
    {
        editContext = new(commentModel);
        _commentTextIdentifier = new(commentModel, "Text");
    }

    private async Task HandleValidSubmit()
    {
        commentModel.DnrId = Area?.DNRId??-1;
        commentModel.Date = DateTime.UtcNow;
        await CommentCompleted.InvokeAsync(commentModel);

        await JS.InvokeVoidAsync("closeModal", "saveCommentModal");
        NewModel();
    }

        private void NewModel()
    {
        commentModel = new();
        editContext = new(commentModel);
        StateHasChanged();
    }


    private async Task RefocusCommentText()
    {
        if (commentText?.Element is not null)
        {
            await commentText.Element.Value.FocusAsync();
        }
    }

    private async void OnKeyPress(KeyboardEventArgs el)
    {
        if (el.Key == "Enter")
        {
            await PopSaveDialog();
        }
    }

    private async Task OnLoseFocus(object el)
    {
        if ((!_popingModal) && (editContext?.IsModified() ?? false))
        {
            await PopSaveDialog();
        }
    }

    private async Task PopSaveDialog()
    {
        _popingModal = true;
        await JS.InvokeVoidAsync("popModal", "saveCommentModal");
    }

    private void OnModalFocus()
    {
        _popingModal = false;
    }

}
