@inject IBiomeData biomeData

<div>
    <div class="@BiomeFilterListClass(true)">
        @if (biomes is not null)
        {
            <h3>Biome</h3>
            <div class="selection-list-item @IsBiomeSelected("All")" @onclick="(()=> OnBiomeClick() )">All</div>
            @foreach (var b in biomes)
            {
                <div class="selection-list-item @IsBiomeSelected(b.Name)" @onclick="(()=>OnBiomeClick(b.Name))">@b.Name</div>
            }
        }
    </div>
    <div class="@BiomeFilterListClass(false)">
        @if (landscapes is not null)
        {
            <h3>Landscape</h3>
            <div class="selection-list-item @IsLandscapeSelected("All")" @onclick="(()=> OnLandscapeClick() )">All</div>
            @foreach (var l in landscapes)
            {
                <div class="selection-list-item @IsLandscapeSelected(l)" @onclick="(()=>OnLandscapeClick(l))">@l</div>
            }
        }
    </div>
</div>


@code {
    [Parameter, EditorRequired]
    public bool isFilteredByBiome { get; set; }
    [Parameter]
    public string SelectedBiome { get; set; } = "All";
    [Parameter]
    public EventCallback<(string, string)> SelectedBiomeChanged { get; set; }
    [Parameter]
    public string SelectedLandscape { get; set; } = "All";
    [Parameter]
    public EventCallback<(string, string)> SelectedLandscapeChanged { get; set; }

    private List<Biome> biomes = new();
    private List<string> landscapes = new();
    private const string _defaultBackground = "https://images.dnr.state.mn.us/destinations/snas/banner_snas_main.jpg";

    protected async override Task OnInitializedAsync()
    {
        biomes = await biomeData.GetAllBiomesAsync();
        landscapes = biomes.SelectMany(biome => biome.Landscapes).OrderBy(s => s).ToList();
    }

    private string IsBiomeSelected(string item)
    {
        return SelectedBiome == item ? "item-selected" : string.Empty;
    }

    private string IsLandscapeSelected(string item)
    {
        return SelectedLandscape == item ? "item-selected" : string.Empty;
    }

    private async Task OnBiomeClick(string selector = "All")
    {
        SelectedBiome = selector;
        await SelectedBiomeChanged.InvokeAsync((selector, biomes.Where(b => b.Name == SelectedBiome).FirstOrDefault()?.Url ?? _defaultBackground));
    }

    private async Task OnLandscapeClick(string selector = "All")
    {
        SelectedLandscape = selector;
        await SelectedLandscapeChanged.InvokeAsync((selector, biomes.Where(b => b.Landscapes.Contains(SelectedLandscape)).FirstOrDefault()?.Url ?? _defaultBackground));
    }

    private string BiomeFilterListClass(bool isBiome)
    {
        string css = string.Empty;
        if (isBiome != isFilteredByBiome)
        {
            css = "list-hidden";
        }
        return css;
    }
}
